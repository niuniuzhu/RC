using RC.Net;
using RC.Net.Protocol;

namespace [ns]
{
	[Packet( [module], [cmd] )]
	public class [cls_name] : Packet
	{
		[option]public [dto_cls_name] dto;[/option]

		public [cls_name]() : base( [module], [cmd], [reply] )
		{
		}

		[option]public [cls_name]( [dto_cls_name] dto ) : base( [module], [cmd], [reply] )
		{
			this.dto = dto;
		}

		[ctors \n]public [cls_name]( [fields ,][field_type] [field_name][/fields] ) : base( [module], [cmd], [reply] )
		{
			this.dto = new [dto_cls_name]( [fields ,][field_name][/fields] );
		}[/ctors][/option]

		protected override void InternalSerialize( StreamBuffer buffer )
		{
			base.InternalSerialize( buffer );
			[option]this.dto.Serialize( buffer );[/option]
		}

		protected override void InternalDeserialize( StreamBuffer buffer )
		{
			base.InternalDeserialize( buffer );
			[option]this.dto = new [dto_cls_name]();
			this.dto.Deserialize( buffer );[/option]
		}
		
		[reply_packet \n]public [packet_cls_name] Reply( [fields ,][field_type] [field_name][/fields] )
		{
			[packet_cls_name] packet = new [packet_cls_name]( [fields ,][field_name][/fields] );
			packet.srcPid = this.pid;
			packet.isRPCReturn = true;
			return packet;
		}[/reply_packet]

		public override string ToString()
		{
			return $"module:{this.module}, cmd:{this.command}[option], dto:{this.dto}[/option]";
		}
	}
}