using System.Collections.Generic;
using RC.Net;
using RC.Net.Protocol;

namespace Protocol.Gen
{
	public class [cls_name] : DTO
	{
		[fields \n]public [field_type] [field_name];[/fields]
		
		[ctors \n]public [cls_name]( [fields ,][field_type] [field_name][/fields] )
		{
			[fields \n]this.[field_name] = [field_name];[/fields]
		}[/ctors]

		protected override void InternalSerialize( StreamBuffer buffer )
		{
			base.InternalSerialize( buffer );

			[serialize \n]
			if ( [condition ||]this.[key] == [value][/condition])
			{
				[rw_buffer \n]buffer.[write_method]( this.[field_name] );[list \n]int count = this.[field_name].Length;
				buffer.Write( ( ushort )count );
				for ( int i = 0; i < count; ++i )
					this.[field_name][i].Serialize( buffer );
				[/list][/rw_buffer]
			}[/serialize]
		}

		protected override void InternalDeserialize( StreamBuffer buffer )
		{
			base.InternalDeserialize( buffer );

			[serialize \n]
			if ( [condition ||]this.[key] == [value][/condition])
			{
				[rw_buffer \n]this.[field_name] = buffer.[read_method]();[list \n]int count = buffer.ReadUShort();
				this.[field_name] = new [sub_dto_cls_name][count];
				for ( int i = 0; i < count; ++i )
				{
					var [field_name] = this.[field_name][i] = new [sub_dto_cls_name]();
					[field_name].Deserialize( buffer );
				}[/list][/rw_buffer]
			}[/serialize]
		}

		public override string ToString()
		{
			return $"[fields ,][field_name]:{this.[field_name]}[/fields]";
		}
	}
}